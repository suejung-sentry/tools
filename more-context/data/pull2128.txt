diff --git a/src/seer/automation/codegen/models.py b/src/seer/automation/codegen/models.py
index 61a3f00a6..731336abd 100644
--- a/src/seer/automation/codegen/models.py
+++ b/src/seer/automation/codegen/models.py
@@ -150,11 +150,11 @@ class CodegenRelevantWarningsStateResponse(BaseModel):
 
 
 class PrFile(BaseModel):
-    # https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28
     filename: str
     patch: str
     status: Literal["added", "removed", "modified", "renamed", "copied", "changed", "unchanged"]
     changes: int
+    sha: str
 
 
 class FilterWarningsRequest(BaseComponentRequest):
diff --git a/src/seer/automation/codegen/relevant_warnings_component.py b/src/seer/automation/codegen/relevant_warnings_component.py
index 4b2bd8df5..0651803fd 100644
--- a/src/seer/automation/codegen/relevant_warnings_component.py
+++ b/src/seer/automation/codegen/relevant_warnings_component.py
@@ -1,7 +1,7 @@
 import logging
 import textwrap
 from pathlib import Path
-from typing import Iterable
+from typing import Any, Iterable
 
 import numpy as np
 from cachetools import LRUCache, cached  # type: ignore[import-untyped]
@@ -33,12 +33,10 @@
 from seer.dependency_injection import inject, injected
 from seer.rpc import RpcClient
 
-logger = logging.getLogger(__name__)
-
 
 class FilterWarningsComponent(BaseComponent[FilterWarningsRequest, FilterWarningsOutput]):
     """
-    Filter out warnings from files that aren't affected by the commit.
+    Filter out warnings from files that aren't affected by the PR.
     """
 
     context: CodegenContext
@@ -88,9 +86,9 @@ def _does_warning_match_a_target_file(
         possible_matches_from_targets = {
             *target_filenames,
             *{
-                filename
+                truncated
                 for filename in target_filenames
-                for filename in self._left_truncated_paths(Path(filename), max_num_paths=1)
+                for truncated in self._left_truncated_paths(Path(filename), max_num_paths=1)
             },
         }
         matches = possible_matches_from_warning & possible_matches_from_targets
@@ -109,14 +107,48 @@ def invoke(self, request: FilterWarningsRequest) -> FilterWarningsOutput:
         return FilterWarningsOutput(warnings=warnings)
 
 
+def _fetch_issues_for_pr_file_cache_key(
+    organization_id: int, provider: str, external_id: str, pr_file: PrFile, *args
+) -> tuple[str]:
+    return hashkey(organization_id, provider, external_id, pr_file.filename, pr_file.sha)
+
+
+@cached(cache=LRUCache(maxsize=4096), key=_fetch_issues_for_pr_file_cache_key)
+@inject
+def _fetch_issues_for_pr_file(
+    organization_id: int,
+    provider: str,
+    external_id: str,
+    pr_file: PrFile,
+    run_id: int,
+    logger: logging.Logger,
+    client: RpcClient = injected,
+) -> list[dict[str, Any]]:
+    pr_filename_to_issues = client.call(
+        "get_issues_related_to_file_patches",
+        organization_id=organization_id,
+        provider=provider,
+        external_id=external_id,
+        pr_files=[pr_file.model_dump()],
+        run_id=run_id,
+    )
+    if pr_filename_to_issues is None:
+        logger.exception(
+            "Something went wrong with the issue-fetching RPC call",
+            extra={"file": pr_file.filename},
+        )
+        return []
+    assert list(pr_filename_to_issues.keys()) == [pr_file.filename]
+    return list(pr_filename_to_issues.values())[0]
+
+
 class FetchIssuesComponent(BaseComponent[CodeFetchIssuesRequest, CodeFetchIssuesOutput]):
     """
-    Fetch issues related to the files in a commit by analyzing stacktrace frames in the issue.
+    Fetch issues related to the files in a PR by analyzing stacktrace frames in the issue.
     """
 
     context: CodegenContext
 
-    @inject
     def _fetch_issues(
         self,
         organization_id: int,
@@ -125,12 +157,11 @@ def _fetch_issues(
         pr_files: list[PrFile],
         max_files_analyzed: int = 7,
         max_lines_analyzed: int = 500,
-        client: RpcClient = injected,
     ) -> dict[str, list[IssueDetails]]:
         """
-        Returns a dict mapping a subset of file names in the commit to issues related to the file.
+        Returns a dict mapping a subset of file names in the PR to issues related to the file.
         They're related if the functions and filenames in the issue's stacktrace overlap with those
-        modified in the commit.
+        modified in the PR.
 
         The `max_files_analyzed` and `max_lines_analyzed` checks ensure that the payload we send to
         seer_rpc doesn't get too large.
@@ -142,22 +173,16 @@ def _fetch_issues(
             if pr_file.status == "modified" and pr_file.changes <= max_lines_analyzed
         ]
         if not pr_files_eligible:
-            self.logger.info("No eligible files in commit.")
+            self.logger.info("No eligible files in PR.")
             return {}
 
         self.logger.info(f"Repo query: {organization_id=}, {provider=}, {external_id=}")
-
-        pr_files_eligible = pr_files_eligible[:max_files_analyzed]
-        filename_to_issues = client.call(
-            "get_issues_related_to_file_patches",
-            organization_id=organization_id,
-            provider=provider,
-            external_id=external_id,
-            pr_files=[pr_file.model_dump() for pr_file in pr_files_eligible],
-            run_id=self.context.run_id,
-        )
-        if filename_to_issues is None:
-            return {}
+        filename_to_issues = {
+            pr_file.filename: _fetch_issues_for_pr_file(
+                organization_id, provider, external_id, pr_file, self.context.run_id, self.logger
+            )
+            for pr_file in pr_files_eligible[:max_files_analyzed]
+        }
         return {
             filename: [IssueDetails.model_validate(issue) for issue in issues]
             for filename, issues in filename_to_issues.items()
@@ -223,7 +248,7 @@ def invoke(
             for issue in issues
         }
         # De-duplicate in case the same issue is present across multiple files. That's possible when
-        # the issue's stacktrace matches multiple files modified in the commit.
+        # the issue's stacktrace matches multiple files modified in the PR.
         # This should be ok b/c the issue should contain enough information that the downstream LLM
         # calls can match any relevant warnings to it. The filename is not the strongest signal.
 
diff --git a/src/seer/automation/codegen/relevant_warnings_step.py b/src/seer/automation/codegen/relevant_warnings_step.py
index 5a29f6577..f84dc794e 100644
--- a/src/seer/automation/codegen/relevant_warnings_step.py
+++ b/src/seer/automation/codegen/relevant_warnings_step.py
@@ -115,18 +115,22 @@ def _invoke(self, **kwargs):
         self.logger.info("Executing Codegen - Relevant Warnings Step")
         self.context.event_manager.mark_running()
 
-        # 1. Read the commit.
+        # 1. Read the PR.
         repo_client = self.context.get_repo_client(type=RepoClientType.READ)
-        commit = repo_client.repo.get_commit(self.request.commit_sha)
+        pr_files = repo_client.repo.get_pull(self.request.pr_id).get_files()
         pr_files = [
             PrFile(
-                filename=file.filename, patch=file.patch, status=file.status, changes=file.changes
+                filename=file.filename,
+                patch=file.patch,
+                status=file.status,
+                changes=file.changes,
+                sha=file.sha,
             )
-            for file in commit.files
+            for file in pr_files
             if file.patch
         ]
 
-        # 2. Only consider warnings from files changed in the commit.
+        # 2. Only consider warnings from files changed in the PR.
         filter_warnings_component = FilterWarningsComponent(self.context)
         filter_warnings_request = FilterWarningsRequest(
             warnings=self.request.warnings, target_filenames=[file.filename for file in pr_files]
@@ -141,7 +145,7 @@ def _invoke(self, **kwargs):
             self._complete_run(CodePredictRelevantWarningsOutput(relevant_warning_results=[]))
             return
 
-        # 3. Fetch issues related to the commit.
+        # 3. Fetch issues related to the PR.
         fetch_issues_component = FetchIssuesComponent(self.context)
         fetch_issues_request = CodeFetchIssuesRequest(
             organization_id=self.request.organization_id, pr_files=pr_files
diff --git a/tests/automation/codegen/test_relevant_warnings.py b/tests/automation/codegen/test_relevant_warnings.py
index e8aed876b..0d6f6589a 100644
--- a/tests/automation/codegen/test_relevant_warnings.py
+++ b/tests/automation/codegen/test_relevant_warnings.py
@@ -134,6 +134,7 @@ def component(self):
         mock_context.repo.provider = "github"
         mock_context.repo.provider_raw = "integrations:github"
         mock_context.repo.external_id = "123123"
+        mock_context.run_id = 1
         return FetchIssuesComponent(mock_context)
 
     def test_bad_provider_raw(self, component: FetchIssuesComponent):
@@ -151,16 +152,16 @@ def test_invoke_filters_files(
     ):
         assert component.context.repo.provider_raw is not None
         pr_files = [
-            PrFile(filename="fine.py", patch="patch1", status="modified", changes=100),
-            PrFile(filename="many_changes.py", patch="patch2", status="modified", changes=1_000),
-            PrFile(filename="not_modified.py", patch="patch3", status="added", changes=100),
+            PrFile(filename="fine.py", patch="patch1", status="modified", changes=100, sha="sha1"),
+            PrFile(filename="big.py", patch="patch2", status="modified", changes=1_000, sha="sha2"),
+            PrFile(filename="added.py", patch="patch3", status="added", changes=100, sha="sha3"),
         ]
-        filename_to_issues = {"fine.py": [next(generate(IssueDetails)).model_dump()]}
-        mock_rpc_client_call.return_value = filename_to_issues
 
+        pr_filename_to_issues = {"fine.py": [next(generate(IssueDetails)).model_dump()]}
+        mock_rpc_client_call.return_value = pr_filename_to_issues
         filename_to_issues_expected = {
             filename: [IssueDetails.model_validate(issue) for issue in issues]
-            for filename, issues in filename_to_issues.items()
+            for filename, issues in pr_filename_to_issues.items()
         }
 
         request = CodeFetchIssuesRequest(
@@ -169,6 +170,20 @@ def test_invoke_filters_files(
         )
         output: CodeFetchIssuesOutput = component.invoke(request)
         assert output.filename_to_issues == filename_to_issues_expected
+        assert mock_rpc_client_call.call_count == 1
+
+        # Test the cache
+        component.context.run_id += 1
+        output: CodeFetchIssuesOutput = component.invoke(request)
+        assert output.filename_to_issues == filename_to_issues_expected
+        assert mock_rpc_client_call.call_count == 1
+        component.context.run_id -= 1
+
+        mock_rpc_client_call.return_value = None
+        request.organization_id = 2
+        output: CodeFetchIssuesOutput = component.invoke(request)
+        assert output.filename_to_issues == {filename: [] for filename in pr_filename_to_issues}
+        assert mock_rpc_client_call.call_count == 2
 
 
 _T = TypeVar("_T")
@@ -445,12 +460,12 @@ def test_relevant_warnings_step_invoke(
     mock_invoke_filter_warnings_component: Mock,
 ):
     mock_repo_client = MagicMock()
-    mock_commit = MagicMock()
+    mock_pr = MagicMock()
     mock_pr_files = next(generate(list[PrFile]))
     mock_context = MagicMock()
     mock_context.get_repo_client.return_value = mock_repo_client
-    mock_repo_client.repo.get_commit.return_value = mock_commit
-    mock_commit.files = mock_pr_files
+    mock_repo_client.repo.get_pull.return_value = mock_pr
+    mock_pr.get_files.return_value = mock_pr_files
 
     num_associations = 5
 
@@ -492,7 +507,7 @@ def test_relevant_warnings_step_invoke(
     step.invoke()
 
     mock_context.get_repo_client.assert_called_once()
-    mock_repo_client.repo.get_commit.assert_called_once_with(request.commit_sha)
+    mock_repo_client.repo.get_pull.assert_called_once_with(request.pr_id)
 
     mock_invoke_filter_warnings_component.assert_called_once()
     mock_invoke_filter_warnings_component.call_args[0][0].warnings = request.warnings